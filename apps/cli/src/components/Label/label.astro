---
import { cva, type VariantProps } from 'class-variance-authority'
import { twMerge } from 'tailwind-merge'

export interface LabelProps extends Omit<astroHTML.JSX.LabelHTMLAttributes, 'size'>, VariantProps<typeof labelVariants> {
  class?: string
  required?: boolean
  optional?: boolean
  description?: string
  error?: string
}

const labelVariants = cva(
  [
    // Base styles
    'block font-medium leading-6 transition-colors duration-200',
    // Focus styles for when associated input is focused
    'peer-focus-visible:text-blue-600 dark:peer-focus-visible:text-blue-400',
  ],
  {
    variants: {
      size: {
        small: 'text-sm',
        medium: 'text-sm',
        large: 'text-base',
      },
      weight: {
        normal: 'font-normal',
        medium: 'font-medium',
        semibold: 'font-semibold',
        bold: 'font-bold',
      },
      intent: {
        default: 'text-gray-900 dark:text-gray-100',
        muted: 'text-gray-600 dark:text-gray-400',
        error: 'text-red-600 dark:text-red-400',
        success: 'text-green-600 dark:text-green-400',
      },
    },
    defaultVariants: {
      size: 'medium',
      weight: 'medium',
      intent: 'default',
    },
  }
)

const descriptionVariants = cva('mt-1 text-sm leading-5 transition-colors duration-200', {
  variants: {
    intent: {
      default: 'text-gray-600 dark:text-gray-400',
      muted: 'text-gray-500 dark:text-gray-500',
      error: 'text-red-600 dark:text-red-400',
      success: 'text-green-600 dark:text-green-400',
    },
  },
  defaultVariants: {
    intent: 'default',
  },
})

const { class: className, required, optional, description, error, size, weight, intent = error ? 'error' : 'default', ...props } = Astro.props

const labelId = props.id || `label-${Math.random().toString(36).substr(2, 9)}`
const descriptionId = description ? `${labelId}-description` : undefined
const errorId = error ? `${labelId}-error` : undefined

// Determine the final intent based on error state
const finalIntent = error ? 'error' : intent
---

<div class="label-wrapper">
  <label {...props} id={labelId} class={twMerge(labelVariants({ size, weight, intent: finalIntent }), className)} aria-describedby={[descriptionId, errorId].filter(Boolean).join(' ') || undefined}>
    <slot />
    {
      required && (
        <span class="ml-1 text-red-500" aria-label="required">
          *
        </span>
      )
    }
    {optional && !required && <span class="ml-1 text-sm font-normal text-gray-500 dark:text-gray-400">(optional)</span>}
  </label>

  {
    description && (
      <p id={descriptionId} class={descriptionVariants({ intent: finalIntent })}>
        {description}
      </p>
    )
  }

  {
    error && (
      <p id={errorId} class={twMerge(descriptionVariants({ intent: 'error' }), 'mt-1')} role="alert" aria-live="polite">
        {error}
      </p>
    )
  }
</div>

<style>
  .label-wrapper {
    @apply space-y-0;
  }

  /* Ensure proper spacing between label elements */
  .label-wrapper > label + p {
    @apply mt-1;
  }

  /* Focus styles for better accessibility */
  label:focus-within {
    @apply outline-none;
  }

  /* Ensure required indicator is accessible */
  [aria-label='required'] {
    @apply inline-block;
  }
</style>
