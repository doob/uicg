---
import { cva } from 'class-variance-authority'
import { twMerge } from 'tailwind-merge'

interface AccordionItem {
  title: string
  content: string
  open: boolean
}

interface AccordionProps {
  class: string
  intent?:
    | 'primary'
    | 'secondary'
    | 'danger'
    | 'warning'
    | 'success'
    | 'info'
    | 'ghost'
  items: AccordionItem[]
}

const baseClasses = cva('focus:outline-none focus:ring-2 focus:ring-offset-2', {
  variants: {
    intent: {
      primary: [
        'bg-primary-500',
        'text-white',
        'border-transparent',
        'hover:bg-primary-600',
      ],
      secondary: [
        'bg-secondary-300',
        'text-black',
        //'border-secondary-400',
        'hover:bg-secondary-500',
      ],
      danger: [
        'bg-red-500',
        'text-white',
        'border-transparent',
        'hover:bg-red-600',
      ],
      warning: [
        'bg-yellow-500',
        'text-white',
        'border-transparent',
        'hover:bg-yellow-600',
      ],
      success: [
        'bg-green-500',
        'text-white',
        'border border-green-500',
        'hover:bg-green-600',
      ],
      info: [
        'bg-blue-500',
        'text-white',
        'border-transparent',
        'hover:bg-blue-600',
      ],
      ghost: [
        'bg-gray-200',
        'text-gray-800',
        'border-gray-400',
        'hover:bg-gray-100',
      ],
    },
    variant: {
      default: [],
      contained: 'border !text-white',
      outlined: 'border bg-transparent',
      text: 'border border-transparent bg-transparent hover:!bg-opacity-10',
    },
    size: {
      small: ['text-sm', 'py-1', 'px-2'],
      medium: ['text-base', 'py-2', 'px-4'],
      large: ['text-lg', 'py-3', 'px-5'],
    },
    rounded: {
      none: ['rounded-none'],
      sm: ['rounded-sm'],
      md: ['rounded-md'],
      full: ['rounded-full'],
    },
  },
})

const {
  class: additionalClasses = '',
  intent,
  items,
} = Astro.props as AccordionProps

const className = twMerge(baseClasses({ intent }), additionalClasses)
const activeClasses = 'bg-opacity-10'
---

<div class={className}>
  {
    items.map((item: AccordionItem, index) => (
      <details key={index}>
        <summary
          data-accordion-button
          class={`accordion-header flex w-full cursor-pointer bg-gray-100 px-4 py-2 text-left font-medium text-gray-800 dark:bg-slate-800 dark:text-gray-300`}
        >
          {item.title}
          <svg
            aria-hidden="true"
            class="caret ml-auto h-6 w-6 items-center transition-all duration-200"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="currentColor"
            style="--sl-icon-size: 2.25rem;"
          >
            <path d="m14.83 11.29-4.24-4.24a1 1 0 1 0-1.42 1.41L12.71 12l-3.54 3.54a1 1 0 0 0 0 1.41 1 1 0 0 0 .71.29 1 1 0 0 0 .71-.29l4.24-4.24a1.002 1.002 0 0 0 0-1.42Z" />
          </svg>
        </summary>
        <div class={`rounded-b-md p-4 dark:text-gray-300`}>{item.content}</div>
      </details>
    ))
  }
</div>

<script>
  // import slugify from 'slugify'
  // const urlSearchParams = new URLSearchParams(window.location.search)
  // const params = Object.fromEntries(urlSearchParams.entries())
  // console.log('params', params)

  // const buttons = document.querySelectorAll('[data-accordion-button]')

  // buttons.forEach((button) => {
  //   button.addEventListener('click', () => {
  //     const id = slugify(button.textContent, { lower: true })
  //     button.nextElementSibling.classList.toggle('hidden')

  //     const isHidden = button.nextElementSibling.classList.contains('hidden')

  //     if (isHidden) {
  //       delete params[id]
  //     } else {
  //       params[id] = true
  //     }

  //     //button.nextElementSibling.classList.toggle('bg-red-500')
  //     //${item.open && 'bg-red-400'}
  //   })
  // })
</script>

<style>
  [open] > summary .caret {
    transform: rotate(90deg);
  }
</style>
