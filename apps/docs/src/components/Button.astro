---
import type { HTMLAttributes } from 'astro/types'
import { cva, type VariantProps } from 'class-variance-authority'
import { twMerge } from 'tailwind-merge'

export interface ButtonProps
  extends HTMLAttributes<'button'>,
    VariantProps<typeof button> {}

interface MenuItem {
  name: string
  href: string
  icon: string // Assuming icons are SVG paths for simplicity
  current?: boolean // Optional, to highlight the current active menu item
}

const button = cva(
  'font-semibold focus:outline-none focus:ring-2 focus:ring-offset-2 flex justify-center items-center gap-3',
  {
    variants: {
      intent: {
        primary: [
          'bg-primary-500',
          'text-white',
          'border-transparent',
          'hover:bg-primary-600',
        ],
        secondary: [
          'bg-secondary-300',
          'text-black',
          //'border-secondary-400',
          'hover:bg-secondary-500',
        ],
        danger: [
          'bg-red-500',
          'text-white',
          'border-transparent',
          'hover:bg-red-600',
        ],
        warning: [
          'bg-yellow-500',
          'text-white',
          'border-transparent',
          'hover:bg-yellow-600',
        ],
        success: [
          'bg-green-500',
          'text-white',
          'border border-green-500',
          'hover:bg-green-600',
        ],
        info: [
          'bg-blue-500',
          'text-white',
          'border-transparent',
          'hover:bg-blue-600',
        ],
        ghost: [
          'bg-gray-200',
          'text-gray-800',
          'border-gray-400',
          'hover:bg-gray-100',
        ],
      },
      variant: {
        default: [],
        contained: 'border !text-white',
        outlined: 'border bg-transparent',
        text: 'border border-transparent bg-transparent hover:!bg-opacity-10',
      },
      size: {
        small: ['text-sm', 'py-1', 'px-2'],
        medium: ['text-base', 'py-2', 'px-4'],
        large: ['text-lg', 'py-3', 'px-5'],
      },
      rounded: {
        none: ['rounded-none'],
        sm: ['rounded-sm'],
        md: ['rounded-md'],
        full: ['rounded-full'],
      },
    },
    compoundVariants: [
      {
        intent: 'primary',
        variant: 'outlined',
        className:
          'text-primary-500 bg-transparent border border-primary-500 hover:bg-transparent hover:border-primary-700 hover:text-primary-700',
      },
      {
        intent: 'secondary',
        variant: 'outlined',
        className:
          'text-secondary-500 bg-transparent border border-secondary-500 hover:bg-transparent hover:border-secondary-600 hover:text-secondary-600',
      },
      {
        intent: 'success',
        variant: 'outlined',
        className:
          'text-green-500 bg-transparent border border-green-500 hover:bg-transparent hover:border-green-700 hover:text-green-700',
      },
      {
        intent: 'danger',
        variant: 'outlined',
        className:
          'text-red-500 bg-transparent border border-red-500 hover:bg-transparent hover:border-red-700 hover:text-red-700',
      },
      {
        intent: 'ghost',
        variant: 'outlined',
        className:
          'text-gray-500 bg-transparent border border-gray-500 hover:bg-transparent hover:border-gray-700 hover:text-gray-700',
      },
    ],
  }
)

const {
  intent = 'ghost',
  size = 'medium',
  rounded = 'md',
  variant = 'default',
  class: additionalClasses = '',
  ...rest
} = Astro.props as ButtonProps
---

<button
  class={twMerge(button({ intent, size, rounded, variant }), additionalClasses)}
  {...rest}
>
  <slot />
</button>
